{"version":3,"file":"index.js","sources":["../../src/courses/p30.ts","../../src/app.ts"],"sourcesContent":["const p30 = () => {\r\n  /* let person = { name: \"小满\", age: 24 };\r\n//   let personProxy = new Proxy(person, {\r\n//     // 取值\r\n//     get() {},\r\n//     // 赋值\r\n//     set(target, key, value, receiver) {\r\n//       return true;\r\n//     },\r\n//     // 拦截函数调用\r\n//     apply() {},\r\n//     //拦截in操作符\r\n//     has() {\r\n//       return true;\r\n//     },\r\n//     // 拦截forin\r\n//     ownKeys(target) {\r\n//       return true;\r\n//     },\r\n//     //拦截new\r\n//     construct(){},\r\n//     //拦截delete\r\n//     deleteProperty(){}\r\n//   });\r\n  // ES6推荐使用Reflact取对象值\r\n  // 第三个参数可以保证上下文的一致性\r\n  console.log(Reflect.get(person, \"name\", person));\r\n  Reflect.set(person, \"name\", \"大满\", person);\r\n  console.log(Reflect.get(person, \"name\", person));\r\n  // 代理\r\n  let personProxy = new Proxy(person, {\r\n    // 无论取什么都经过get\r\n    get(target, key, receiver) {\r\n      if (target.age <= 18) {\r\n        return Reflect.get(target, key, receiver);\r\n      } else {\r\n        return \"小满成年啦\";\r\n      }\r\n    },\r\n  });\r\n  console.log(personProxy.name); */\r\n  // 观察者模式\r\n\r\n  const list: Set<Function> = new Set();\r\n\r\n  const autorun = (cb: Function) => {\r\n    if (!list.has(cb)) {\r\n      list.add(cb);\r\n    }\r\n  };\r\n  // 可观测数据\r\n  const observable = <T extends object>(params: T) => {\r\n    return new Proxy(params, {\r\n      set(target, key, value, receiver) {\r\n        const result = Reflect.set(target, key, value, receiver);\r\n        list.forEach((fn) => fn());\r\n        return result;\r\n      },\r\n    });\r\n  };\r\n  const perProxy = observable({ name: \"小满\", attr: \"威猛先生\" });\r\n\r\n  autorun(() => {\r\n    console.log(\"有变化啦\");\r\n  });\r\n\r\n  perProxy.attr = \"不威猛\";\r\n};\r\nexport { p30 };\r\n","import { p01 } from \"./courses/p01\";\r\nimport { p02 } from \"./courses/p02\";\r\nimport { p03 } from \"./courses/p03\";\r\nimport { p04 } from \"./courses/p04\";\r\nimport { p05 } from \"./courses/p05\";\r\nimport { p06 } from \"./courses/p06\";\r\nimport { p07 } from \"./courses/p07\";\r\nimport { p08 } from \"./courses/p08\";\r\nimport { p09 } from \"./courses/p09\";\r\nimport { p10 } from \"./courses/p10\";\r\nimport { p11 } from \"./courses/p11\";\r\nimport { p12 } from \"./courses/p12\";\r\nimport { p13 } from \"./courses/p13\";\r\nimport { p14 } from \"./courses/p14\";\r\nimport { p15 } from \"./courses/p15\";\r\nimport { p16 } from \"./courses/p16\";\r\nimport { p17 } from \"./courses/p17\";\r\nimport { p18 } from \"./courses/p18\";\r\nimport { p20 } from \"./courses/p20\";\r\nimport { p21 } from \"./courses/p21\";\r\nimport { p22 } from \"./courses/p22\";\r\nimport { p23 } from \"./courses/p23\";\r\nimport { p24 } from \"./courses/p24\";\r\nimport { p29 } from \"./courses/p29\";\r\nimport { p30 } from \"./courses/p30\";\r\nimport { Dictionaries } from \"./enum\";\r\nimport { Data, Expire, Key, Result, StorageCls } from \"./type\";\r\n\r\n/* p01();\r\np02();\r\np03();\r\np04();\r\np05();\r\np06();\r\np07();\r\np08();\r\np09();\r\np10();\r\np11();\r\np12();\r\np13();\r\np14();\r\np15();\r\np16();\r\np17();\r\np18();\r\np20();\r\np21();\r\np22();\r\np23();\r\np24();\r\nconst a: string = \"小满好短sss\";\r\nconsole.log(a);\r\nif (process.env.NODE_ENV === \"development\") {\r\n  console.log(\"开发\");\r\n} else {\r\n  console.log(\"生产\");\r\n}\r\nlet a: string = \"webpack + TS\";\r\nconsole.log(a);\r\nexport const a: number = 1;\r\nexport const b: string = \"ikun\";\r\nlet x = 1;\r\nlet fn = () => 123;\r\nconsole.log(x, fn);\r\nexport class Storage implements StorageCls {\r\n  get<T>(key: Key): Result<T | null> {\r\n    const value = localStorage.getItem(key);\r\n    if (value) {\r\n      const data: Data<T> = JSON.parse(value);\r\n      const now = new Date().getTime();\r\n      if (\r\n        typeof data[Dictionaries.expire] == \"number\" &&\r\n        data[Dictionaries.expire] < now\r\n      ) {\r\n        this.remove(key);\r\n        return {\r\n          message: `您的${key}已过期`,\r\n          value: null,\r\n        };\r\n      } else {\r\n        return {\r\n          message: \"成功\",\r\n          value: data.value,\r\n        };\r\n      }\r\n    } else {\r\n      return {\r\n        message: \"值无效\",\r\n        value: null,\r\n      };\r\n    }\r\n  }\r\n  set<T>(key: Key, value: T, expire: Expire = Dictionaries.permanent) {\r\n    const data = {\r\n      value,\r\n      [Dictionaries.expire]: expire,\r\n    };\r\n\r\n    localStorage.setItem(key, JSON.stringify(data));\r\n  }\r\n  remove(key: Key) {\r\n    localStorage.removeItem(key);\r\n  }\r\n  clear() {\r\n    localStorage.clear();\r\n  }\r\n}\r\np29(); */\r\np30();\r\n"],"names":["list","Set","perProxy","Proxy","name","attr","set","target","key","value","receiver","result","Reflect","forEach","fn","cb","console","log","has","add","p30"],"mappings":"+QAAY,MA2CV,MAAMA,EAAsB,IAAIC,IAiB1BC,EARG,IAAIC,MAQe,CAAEC,KAAM,KAAMC,KAAM,QARrB,CACvBC,IAAIC,EAAQC,EAAKC,EAAOC,GACtB,MAAMC,EAASC,QAAQN,IAAIC,EAAQC,EAAKC,EAAOC,GAE/C,OADAV,EAAKa,SAASC,GAAOA,MACdH,CACR,IANc,IANFI,IAiBT,KACNC,QAAQC,IAAI,OAAO,EAjBdjB,EAAKkB,IAAIH,IACZf,EAAKmB,IAAIJ,GAmBbb,EAASG,KAAO,KAAK,EC2CvBe"}